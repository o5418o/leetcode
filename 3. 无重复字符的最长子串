解题思路：采用滑动窗口形式，当检测到重复字符时，不断向左输出原有列表中的字符，知道重复的字符输出。

尝试思路：
第一次尝试采用左右指针，即当检测到重复字符时，将左指针移动到右指针的位置，重新计算列表的长度。
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        minstr, res = [], 0
        # 特例
        if not str:
            return 0
        temp1, temp2 = 0, 0
        while temp2 < len(s):
            if s[temp2] not in minstr:
                minstr.append(s[temp2])
                temp2 += 1
                res = len(minstr)
            else:
                res = len(minstr) if len(minstr) > res else res
                minstr = []
                temp1 = temp2
                minstr.append(s[temp1])
                temp2 += 1
        return res
        
最终解题思路：
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        cur_len, max_len = 0, 0
        left, right = 0, 0
        lookup = set()
        if not s: return 0
        for i in range(len(s)):
            while s[i] in lookup:
                lookup.remove(s[left])
                left += 1
            lookup.add(s[i])
            cur_len = len(lookup)
            max_len = cur_len if cur_len > max_len else max_len
        return max_len
